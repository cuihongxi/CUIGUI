						重复造轮子

时间:	2020年2月14日12:05:05

	此时正值新型冠状肺炎爆发时期，我也被封在家里不能外出。想想应该重新整理一下以前写的代码。
	在接触编程的这五年多的时间里，我自己重复造了很多轮子。很多人都说不要重复造轮子，要在前人的基础上继续前进。开始的时候这种说法我也认同，但是轮子造多了，就发现完全不是那么回事。原因是，当我在实践中遇到了很多问题，通过对这些问题的思考，解决了以前在计算机编程中的很多疑惑。如果没有造轮子，直接使用别人已经造好的函数，就遇不到这些问题，人家已经给你封装的很好了。
	以前造过的轮子，随着这几年编程经验的提高，感觉有很多可以改进的地方。同时也需要自己实现出来，并希望将来能用于实际工程中。这是一个反复提高的过程。

	GUI图形界面是一个很好的平台，通过对它的重构，能够把以前一直存在于脑海中的想法，实现出来。

	当然实现这些想法，首先得有基石。数据结构的最重要的基石应该是动态内存分配。所以首先实现我想要的动态内存分配。

动态内存分配：
	动态内存分配首先是在一个大内存池中可以申请，释放内存。这是最基本的功能。同时每种应用场景，应该使用不同的内存分配函数。也就是不会一次性将动态内存分配函数全部实现出来，而是通过工程中遇到的实际情况不断增加。

	第一个内存分配函数应该是一个极简内存分配函数。他的特征是在内存中申请一片大的内存，之后应用会在这片内存中再申请小内存，而这些小内存，在应用存活期间不会释放。GUI设计中经常会有一个应用窗口，窗口内有各种控件，这些控件在诞生之后不会被释放，只在窗口销毁时，一起释放。所以这种内存分配方式是很需要的。因为这种方法极为简单粗暴，把它命名为Simple_Malloc()。
	